// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: drivers.proto

/*
Package drivers is a generated protocol buffer package.

It is generated from these files:
	drivers.proto

It has these top-level messages:
	GetFreeDriverRequest
	GetFreeDriverResponse
	ReleaseDriverRequest
	ReleaseDriverResponse
*/
package drivers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Drivers service

type DriversService interface {
	GetFreeDriver(ctx context.Context, in *GetFreeDriverRequest, opts ...client.CallOption) (*GetFreeDriverResponse, error)
	ReleaseDriver(ctx context.Context, in *ReleaseDriverRequest, opts ...client.CallOption) (*ReleaseDriverResponse, error)
}

type driversService struct {
	c    client.Client
	name string
}

func NewDriversService(name string, c client.Client) DriversService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "drivers"
	}
	return &driversService{
		c:    c,
		name: name,
	}
}

func (c *driversService) GetFreeDriver(ctx context.Context, in *GetFreeDriverRequest, opts ...client.CallOption) (*GetFreeDriverResponse, error) {
	req := c.c.NewRequest(c.name, "Drivers.GetFreeDriver", in)
	out := new(GetFreeDriverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversService) ReleaseDriver(ctx context.Context, in *ReleaseDriverRequest, opts ...client.CallOption) (*ReleaseDriverResponse, error) {
	req := c.c.NewRequest(c.name, "Drivers.ReleaseDriver", in)
	out := new(ReleaseDriverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Drivers service

type DriversHandler interface {
	GetFreeDriver(context.Context, *GetFreeDriverRequest, *GetFreeDriverResponse) error
	ReleaseDriver(context.Context, *ReleaseDriverRequest, *ReleaseDriverResponse) error
}

func RegisterDriversHandler(s server.Server, hdlr DriversHandler, opts ...server.HandlerOption) error {
	type drivers interface {
		GetFreeDriver(ctx context.Context, in *GetFreeDriverRequest, out *GetFreeDriverResponse) error
		ReleaseDriver(ctx context.Context, in *ReleaseDriverRequest, out *ReleaseDriverResponse) error
	}
	type Drivers struct {
		drivers
	}
	h := &driversHandler{hdlr}
	return s.Handle(s.NewHandler(&Drivers{h}, opts...))
}

type driversHandler struct {
	DriversHandler
}

func (h *driversHandler) GetFreeDriver(ctx context.Context, in *GetFreeDriverRequest, out *GetFreeDriverResponse) error {
	return h.DriversHandler.GetFreeDriver(ctx, in, out)
}

func (h *driversHandler) ReleaseDriver(ctx context.Context, in *ReleaseDriverRequest, out *ReleaseDriverResponse) error {
	return h.DriversHandler.ReleaseDriver(ctx, in, out)
}
