// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: accounts.proto

package accounts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Accounts service

type AccountsService interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateAccountResponse, error)
	CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...client.CallOption) (*CreateAccountResponse, error)
	GetDriver(ctx context.Context, in *GetDriverRequest, opts ...client.CallOption) (*GetDriverResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...client.CallOption) (*GetTokenResponse, error)
}

type accountsService struct {
	c    client.Client
	name string
}

func NewAccountsService(name string, c client.Client) AccountsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "accounts"
	}
	return &accountsService{
		c:    c,
		name: name,
	}
}

func (c *accountsService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.CreateUser", in)
	out := new(CreateAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...client.CallOption) (*CreateAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.CreateDriver", in)
	out := new(CreateAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) GetDriver(ctx context.Context, in *GetDriverRequest, opts ...client.CallOption) (*GetDriverResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.GetDriver", in)
	out := new(GetDriverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) GetToken(ctx context.Context, in *GetTokenRequest, opts ...client.CallOption) (*GetTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.GetToken", in)
	out := new(GetTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsHandler interface {
	CreateUser(context.Context, *CreateUserRequest, *CreateAccountResponse) error
	CreateDriver(context.Context, *CreateDriverRequest, *CreateAccountResponse) error
	GetDriver(context.Context, *GetDriverRequest, *GetDriverResponse) error
	GetToken(context.Context, *GetTokenRequest, *GetTokenResponse) error
}

func RegisterAccountsHandler(s server.Server, hdlr AccountsHandler, opts ...server.HandlerOption) error {
	type accounts interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateAccountResponse) error
		CreateDriver(ctx context.Context, in *CreateDriverRequest, out *CreateAccountResponse) error
		GetDriver(ctx context.Context, in *GetDriverRequest, out *GetDriverResponse) error
		GetToken(ctx context.Context, in *GetTokenRequest, out *GetTokenResponse) error
	}
	type Accounts struct {
		accounts
	}
	h := &accountsHandler{hdlr}
	return s.Handle(s.NewHandler(&Accounts{h}, opts...))
}

type accountsHandler struct {
	AccountsHandler
}

func (h *accountsHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateAccountResponse) error {
	return h.AccountsHandler.CreateUser(ctx, in, out)
}

func (h *accountsHandler) CreateDriver(ctx context.Context, in *CreateDriverRequest, out *CreateAccountResponse) error {
	return h.AccountsHandler.CreateDriver(ctx, in, out)
}

func (h *accountsHandler) GetDriver(ctx context.Context, in *GetDriverRequest, out *GetDriverResponse) error {
	return h.AccountsHandler.GetDriver(ctx, in, out)
}

func (h *accountsHandler) GetToken(ctx context.Context, in *GetTokenRequest, out *GetTokenResponse) error {
	return h.AccountsHandler.GetToken(ctx, in, out)
}
